searchState.loadedDescShard("dim_extern_api", 0, "Library contains a common interface for extracting and …\nThe API response could not be deserialized: {error}\nContains the error value\nTrait that must be implemented by external metadata agents …\nTrait must be implemented by all external metadata agents …\nNo episodes found for the id supplied: id={id} …\nCould not find genre with supplied id: {id}\nNo results are found: query={query} year={year:?}\nNo seasons found for the id supplied: {id}\nContains the success value\nOther error, usually contains an error that shouldn’t …\nMax retry count reached\nThe remote API returned an error ({code}): {message}\nThe request timeouted\nUpcast <code>self</code> into <code>ExternalQueryShow</code>. It is important that …\nA list of backdrops for this media object.\nGet all actors for a media by external id. Actors must be …\nThe description or overview of this media object.\nThe description of this season.\nThe duration for this media object.\nGet all episodes for a season ranked in order of the …\nString representation of the id for this media object.\nString representation of the id for this season object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of genres for this media object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of posters for this media object.\nA list of posters for this season object.\nThe rating for this media object normalized in the range 0 …\nThe release date or first air date of this media object.\nSearch by title and year. This must return a Vec of …\nSearch by external id. This must return a singular …\nThe season number for this season.\nGet all seasons for an external id. Seasons must be ranked …\nThe title of this media object.\nThe title of this season.\nA TMDB client implementation with request coalescing and …\nAn Anitomy parser instance.\nA special filename metadata extractor that combines …\nContains a <code>Vec</code> of episode numbers detected.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Anitomy instance.\nParses a filename.\nSets the options to be used by Anitomy when parsing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe User-Agent is generated from the package name “dim”…\nAn instance of <code>TMDBMetadataProvider</code> with a generic …\nUsed to key <code>MetadataProviderOf</code> to search for movies, …\nTMDB Metadata Provider produces <code>ExternalQuery</code> …\nThe base url used to access TMDB;\nUsed to key <code>MetadataProviderOf</code> to search for TV shows, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncurry this metadata provider to supply search results for …\nCreate a new metadata provider instance with this API key.\ncurry this metadata provider to supply search results for …")