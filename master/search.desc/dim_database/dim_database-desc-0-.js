searchState.loadedDescShard("dim_database", 0, "Function which returns a Result&lt;T, E&gt; where T is a new …\nFunction which returns a Result&lt;T, E&gt; where T is a new …\nUgly hack because of a shitty deadlock in <code>Pool</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA compact version of <code>MediaFile</code>. Useful in cases where we …\nMethod will return all mediafiles for a media id.\nMethod will return all mediafiles for a tv show.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMethod will return all the unmatched mediafiles for a …\nEpisode struct encapsulates a media entry representing a …\nThis struct is purely used for querying episodes which …\nMethod deletes a episode based on the tv show id, season …\nepisode number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod returns a episodes discriminated by episode number, …\nMethod returns all of the episodes belonging to a season.\nMethod returns all of the episodes belonging to a tv show.\nFunction will query the last episode that was watched for …\nFunction will query for the episode after the episode …\nFunction will query for the episode after the episode …\nMethod inserts a new episode into the database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegerence to a media object which represents this epsiode. …\nSeason id foreign_key\nMethod updates the rows of a episode.\nGeneric database error: {0:?}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStruct shows a single genre entry\nIntermediary table showing the relationship between a …\nGenre entry that can be inserted into the db.\nStruct which is used to pair a genre to a media\nDecouple media from all genres passed in\nMethod removes a genre from the genre table based on its id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod returns a genre based on genre_id and media_id\nMethod returns all of the episodes belonging to a tv show.\nMethod returns the entry of a genre if exists based on its …\nMethod inserts a new genre into the table otherwise …\nMethod inserts a new entry into the intermediary genre …\nMethod inserts a pair into the genre media table based on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenre name, ie “Action”\nGenre name\nInsertableLibrary struct, same as <code>Library</code> but without the …\nLibrary struct which we can use to deserialize database …\nEnum represents a media type and can be used on a library …\nMethod filters the database for a library with the id …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod returns all libraries that exist in the database in …\nMethod filters the database for a library with the id …\nIs library hidden?\nMethod inserts a InsertableLibrary object into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\na path on the filesystem that holds media. ie …\nEnum used to identify the media type that this library …\nunique name of the library\nStruct which represents a insertable media object. It is …\nMedia struct that represents a media object, usually a …\nStruct which is used when we need to update information …\nDate when this media object was created and inserted into …\nPath to the backdrop for this media object.\nMethod deletes a media object based on its id.\nThis function exists because for some reason <code>CASCADE DELETE</code>…\ndescription of this media object. Usually overview of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod returns a media object based on its id\nMethod returns all Media objects associated with a …\nMethod to get a entry in a library based on name and …\nGet compact representation of a media object. This returns …\nMethod returns the recently added medias\nMethod returns the top rated medias\nunique id.\nMethod used to insert a new media object. Caller can …\nMethod blindly inserts <code>self</code> into the database without …\nMethod used to insert a new media object with a specific …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLazily inserts the media object passed in with the …\nid of the library that this media objects belongs to.\nMedia type encoded as a string. Either movie/tv/episode or …\nname of this media object. Usually the title of a movie, …\nPath to the media poster.\nrating provided by any API that is encoded as a signed …\nMethod used to update the fields of a media object that is …\nYear in which this movie/tv show/episode was …\nSame as <code>MediaFile</code> except its missing the id field.\nMediaFile struct which represents a media file on the …\nSame as <code>MediaFile</code> except its missing the id and library_id …\nAudio codec specifier that we might get from ffprobe\nPrimary audio language\nAudio channels count\nCodec that we might get from ffprobe when running it …\nContainer descriptor that we might get from ffprobe\nFlag which tells us if the file is corrupted or not. ie if …\nMethod deletes mediafile matching the id supplied\nFunction deletes all mediafiles with <code>library_id</code> of lib_id. …\nDuration of the video file that we obtain from ffprobe\nEpisode number that we might get from using regex and the …\nMethod checks if a mediafile with the the target file …\nMethod checks whether a mediafile entry with the filepath …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod returns all mediafiles associated with a library.\nMethod returns all mediafiles associated with a library …\nFunction will return the largest duration for a media.\nMethod returns all metadata for a set of mediafile ids.\nMethod returns all mediafiles associated with a Media …\nMethod returns all metadata of a mediafile based on the id …\nUnique identifier of a mediafile.\nMethod inserts a new mediafile into the database.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLibrary foreign key linking this entry to the library …\nForeign key linking this entry to the media table or <code>Media</code> …\nVideo resolution that we can obtain from ffprobe\navc_profile\nQuality string that we might get from ffprobe when running …\nRaw name that we extract from the filename using regex and …\nRaw year we might be able to extract from the filename …\nSeason number that we might get from using regexa and the …\nString representing the file path of the file we target. …\nMethod updates the columns of a mediafile entry with what …\nMethod will return the number of mediafiles linked against …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait contains some extensions for <code>sqlx</code>.\nMethod which allows you to bind several values in one go. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStruct representing a insertable season Its exactly the …\nStruct represents a season entry in the database.\nStruct used to update information about a season in the …\nString holding the date when the season was added to the …\nMethod deletes a season entry that belongs to a tv show.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod returns the season based on the season number …\nMethod returns all of the seasons that are linked to a tv …\nMethod will return the oldest season for a tv show that is …\nMethod inserts a new season and links it to a tv show …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nId of the asset pointing to the poster.\nSeason number\nForeign key to the tv show we’d like to link against\nMethod updates a seasons entry based on tv show id and …\nStruct represents a tv show entry in the database. This is …\nReturns the argument unchanged.\nid of a media object we marked as a tv show.\nCalls <code>U::from(self)</code>.\nRepresents DirectPlay quality\nRepresents a default video quality made up of resolution …\nMethod gets one entry from the table users based on the …\nRepresents the default video quality for user.\nMethod deletes a entry from the table users and returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod gets all entries from the table users.\nMethod gets users password from the table users based on …\nMethod consumes a InsertableUser object and inserts the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWill return whether the token is valid and hasnt been …\nMethod resets the password for a user to a new password.")