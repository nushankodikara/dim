searchState.loadedDescShard("dim_core", 0, "Dim is a media manager written in rust. It uses Diesel as …\nModule contains our core initialization logic.\nModule contains all the error definitions used in dim, and …\nContains the code for fetching assets like posters and …\nInspect api for Result type\nSqlite CDC implementation\nContains all of the routes exposed by the webapi.\nNew generation scanner infrastructure. Module contains all …\nFunction builds a logger drain that drains to a json file …\nContains the fairing which tracks streams across rest api\nContains all the logic needed for streaming and on-the-fly …\nTree-like structure for representing directories of files.\nVarious utilities\nPath to where metadata is stored and should be fetched to.\nFunction dumps a list of all libraries in the database and …\nAn error has occured while parsing cookies: {0:?}\nA database error occured: {description}.\nA database error occured: {0}\nCouldn’t find the tmdb id provided.\nFailed to create a ffprobe context\nThe requested file does not exist on disk.\nIt appears that the file is corrupted\nCould not parse the gid\nIo Error\nInternal server error.\nInternalServerError“\nInvalid credentials.\nInvalid Media type supplied.\nThe video profile requested doesnt exist\nInvalid request\nLibrary does not exist.\nFailed to deserialize request body: {description:?}.\nNo mediafile found: {0}\nInvite token required.\nSome function returned none.\nThe requested resource does not exist.\nA error with nightfall has occured\nFailed to start process\nError has occured when matching: {0:?}\nRequested session doesnt exist\nAn error in the streaming module has occured\nAuthentication is required for this route.\nUser has no permission to access this route.\nSome unknown error has occured.\nUnsupported file type.\nUpload failed.\nUser does not exist\nRequested username is not available.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait that must be implemented by a media matcher. …\nFunction formats the path where assets are stored.\nReturns the argument unchanged.\nFunction recursively walks the paths passed and returns …\nCalls <code>U::from(self)</code>.\nMatch a WorkUnit to a specific external id.\nA database error has occured: {0:?}\nA error with notify has occured“: {0:?}\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDatabase error: {0:?}\nFailed to dispatch websocket event: {0:?}\nProvided external id not found by provider.\nLibrary supplied doesnt exist: {0:?}\nMediafile insert error: {0:?}\nMovie scanner error: {0:?}\nTv show scanner error: {0:?}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFailed to insert backdrop into database: {0:?}\nFailed to cleanup child-less parent: {0:?}\nFailed to get children count for movie: {0:?}\nFailed to attach genre to media object: {0:?}\nFailed to decouple genres from media: {0:?}\nFailed to create or get genre: {0:?}\nFailed to insert or get media object: {0:?}\nFailed to insert poster into database: {0:?}\nFailed to update mediafile to point to new parent: {0:?}\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFailed to insert backdrop into database: {0:?}\nFailed to cleanup child-less parent: {0:?}\nFailed to get children count for movie: {0:?}\nFailed to attach genre to media object: {0:?}\nEpisode not found\nFailed to decouple genres from media: {0:?}\nFailed to insert episode object: {0:?}\nFailed to create or get genre: {0:?}\nFailed to insert or get tv object: {0:?}\nFailed to insert media object for episode: {0:?}\nFailed to insert or get season: {0:?}\nFailed to get season id for episode: {0:?}\nFailed to get tvshowid for season: {0:?}\nFailed to insert poster into database: {0:?}\nSeason not found\nFailed to update mediafile to point to new parent: {0:?}\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nffcheck - Check if “ffmpeg” and “ffprobe” are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nffprobe exited early with an error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a entry which can either be a directory with …\nHelper which can turn a collection of values into a tree. …\nChanges the root to the first folder that has children.\nReturns the argument unchanged.\nMethod inserts a value in the current entry by recursively …\nCalls <code>U::from(self)</code>.\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nConstruct a <code>serde_json::Value</code> from a JSON literal.")